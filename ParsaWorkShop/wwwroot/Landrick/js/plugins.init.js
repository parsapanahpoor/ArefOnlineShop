if (document.getElementsByClassName("tiny-single-item").length > 0) var slider = tns({ container: ".tiny-single-item", items: 1, controls: !1, mouseDrag: !0, loop: !0, rewind: !0, autoplay: !0, autoplayButtonOutput: !1, autoplayTimeout: 3e3, navPosition: "bottom", speed: 400, gutter: 16 }); if (document.getElementsByClassName("tiny-two-item").length > 0) slider = tns({ container: ".tiny-two-item", controls: !1, mouseDrag: !0, loop: !0, rewind: !0, autoplay: !0, autoplayButtonOutput: !1, autoplayTimeout: 3e3, navPosition: "bottom", speed: 400, gutter: 12, responsive: { 992: { items: 2 }, 767: { items: 2 }, 320: { items: 1 } } }); if (document.getElementsByClassName("tiny-three-item").length > 0) slider = tns({ container: ".tiny-three-item", controls: !1, mouseDrag: !0, loop: !0, rewind: !0, autoplay: !0, autoplayButtonOutput: !1, autoplayTimeout: 3e3, navPosition: "bottom", speed: 400, gutter: 12, responsive: { 992: { items: 3 }, 767: { items: 2 }, 320: { items: 1 } } }); if (document.getElementsByClassName("tiny-four-item").length > 0) slider = tns({ container: ".tiny-four-item", controls: !1, mouseDrag: !0, loop: !0, rewind: !0, autoplay: !0, autoplayButtonOutput: !1, autoplayTimeout: 3e3, navPosition: "bottom", speed: 400, gutter: 12, responsive: { 992: { items: 4 }, 767: { items: 2 }, 320: { items: 1 } } }); if (document.getElementsByClassName("tiny-six-item").length > 0) slider = tns({ container: ".tiny-six-item", controls: !1, mouseDrag: !0, loop: !0, rewind: !0, autoplay: !0, autoplayButtonOutput: !1, autoplayTimeout: 3e3, navPosition: "bottom", speed: 400, gutter: 12, responsive: { 992: { items: 6 }, 767: { items: 3 }, 320: { items: 1 } } }); try { var menu = [], interleaveOffset = .5, swiperOptions = { loop: !0, speed: 1e3, parallax: !0, autoplay: { delay: 6500, disableOnInteraction: !1 }, watchSlidesProgress: !0, pagination: { el: ".swiper-pagination", clickable: !0, renderBullet: function (t, e) { return '<span class="' + e + '">0' + (t + 1) + "</span>" } }, navigation: { nextEl: ".swiper-button-next", prevEl: ".swiper-button-prev" }, on: { progress: function () { for (var t = 0; t < this.slides.length; t++) { var e = this.slides[t].progress * (this.width * interleaveOffset); this.slides[t].querySelector(".slide-inner").style.transform = "translate3d(" + e + "px, 0, 0)" } }, touchStart: function () { for (var t = 0; t < this.slides.length; t++)this.slides[t].style.transition = "" }, setTransition: function (t) { for (var e = 0; e < this.slides.length; e++)this.slides[e].style.transition = t + "ms", this.slides[e].querySelector(".slide-inner").style.transition = t + "ms" } } }, swiper = new Swiper(".swiper-container", swiperOptions); document.querySelectorAll(".slide-bg-image").forEach(t => { t.style.backgroundImage = `url(${t.getAttribute("data-background")})` }) } catch (t) { } try { if (document.getElementById("days")) var eventCountDown = new Date("December 25, 2022 16:37:52").getTime(), myfunc = setInterval(function () { var t = (new Date).getTime(), e = eventCountDown - t, n = Math.floor(e / 864e5), i = Math.floor(e % 864e5 / 36e5), s = Math.floor(e % 36e5 / 6e4), o = Math.floor(e % 6e4 / 1e3); document.getElementById("days").innerHTML = n + "<p class='count-head'>روز</p> ", document.getElementById("hours").innerHTML = i + "<p class='count-head'>ساعت</p> ", document.getElementById("mins").innerHTML = s + "<p class='count-head'>دقیقه</p> ", document.getElementById("secs").innerHTML = o + "<p class='count-head'>ثانیه</p> ", e < 0 && (clearInterval(myfunc), document.getElementById("days").innerHTML = "", document.getElementById("hours").innerHTML = "", document.getElementById("mins").innerHTML = "", document.getElementById("secs").innerHTML = "", document.getElementById("end").innerHTML = "00:00:00:00") }, 1e3) } catch (t) { } try { if (document.getElementById("maintenance")) { var seconds = 3599; function secondPassed() { var t = Math.round((seconds - 30) / 60), e = seconds % 60; e < 10 && (e = "0" + e), document.getElementById("maintenance").innerHTML = t + ":" + e, 0 == seconds ? (clearInterval(countdownTimer), document.getElementById("maintenance").innerHTML = "Buzz Buzz") : seconds-- } var countdownTimer = setInterval("secondPassed()", 1e3) } } catch (t) { } try { const t = document.querySelectorAll(".counter-value"), e = 2500; t.forEach(t => { const n = () => { const i = +t.getAttribute("data-target"), s = +t.innerText; var o = i / e; o < 1 && (o = 1), s < i ? (t.innerText = (s + o).toFixed(0), setTimeout(n, 1)) : t.innerText = i }; n() }) } catch (t) { } try { datepicker(".start", { id: 1 }), datepicker(".end", { id: 1 }) } catch (t) { } try { var Shuffle = window.Shuffle; class t { constructor(t) { t && (this.element = t, this.shuffle = new Shuffle(t, { itemSelector: ".picture-item", sizer: t.querySelector(".my-sizer-element") }), this.addShuffleEventListeners(), this._activeFilters = [], this.addFilterButtons()) } addShuffleEventListeners() { this.shuffle.on(Shuffle.EventType.LAYOUT, t => { console.log("layout. data:", t) }), this.shuffle.on(Shuffle.EventType.REMOVED, t => { console.log("removed. data:", t) }) } addFilterButtons() { const t = document.querySelector(".filter-options"); if (!t) return; const e = Array.from(t.children), n = this._handleFilterClick.bind(this); e.forEach(t => { t.addEventListener("click", n, !1) }) } _handleFilterClick(t) { const e = t.currentTarget, n = e.classList.contains("active"), i = e.getAttribute("data-group"); let s; this._removeActiveClassFromChildren(e.parentNode), n ? (e.classList.remove("active"), s = Shuffle.ALL_ITEMS) : (e.classList.add("active"), s = i), this.shuffle.filter(s) } _removeActiveClassFromChildren(t) { const { children: e } = t; for (let t = e.length - 1; t >= 0; t--)e[t].classList.remove("active") } } document.addEventListener("DOMContentLoaded", () => { window.demo = new t(document.getElementById("grid")) }) } catch (t) { } try { new Tobii } catch (t) { } try { ClassicEditor.create(document.querySelector("#editor")).catch(t => { console.error(t) }) } catch (t) { } try { AOS.init({ easing: "ease-in-out-sine", duration: 1e3 }) } catch (t) { } try { var TxtType = function (t, e, n) { this.toRotate = e, this.el = t, this.loopNum = 0, this.period = parseInt(n, 10) || 2e3, this.txt = "", this.tick(), this.isDeleting = !1 }; function typewrite() { if ("undefined" === n) changeText(); else var t = document.getElementsByClassName("typewrite"); for (var e = 0; e < t.length; e++) { var n = t[e].getAttribute("data-type"), i = t[e].getAttribute("data-period"); n && new TxtType(t[e], JSON.parse(n), i) } var s = document.createElement("style"); s.type = "text/css", s.innerHTML = ".typewrite > .wrap { border-right: 0.08em solid transparent}", document.body.appendChild(s) } TxtType.prototype.tick = function () { var t = this.loopNum % this.toRotate.length, e = this.toRotate[t]; this.isDeleting ? this.txt = e.substring(0, this.txt.length - 1) : this.txt = e.substring(0, this.txt.length + 1), this.el.innerHTML = '<span class="wrap">' + this.txt + "</span>"; var n = this, i = 200 - 100 * Math.random(); this.isDeleting && (i /= 2), this.isDeleting || this.txt !== e ? this.isDeleting && "" === this.txt && (this.isDeleting = !1, this.loopNum++, i = 500) : (i = this.period, this.isDeleting = !0), setTimeout(function () { n.tick() }, i) }, window.onload(typewrite()) } catch (t) { }